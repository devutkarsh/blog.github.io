<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>microservices on Dev Utkarsh</title><link>https://blog.devutkarsh.com/tags/microservices/</link><description>Recent content in microservices on Dev Utkarsh</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 20 Jun 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.devutkarsh.com/tags/microservices/index.xml" rel="self" type="application/rss+xml"/><item><title>Using AWS S3 and Lambda to process file chunks</title><link>https://blog.devutkarsh.com/post/using-aws-s3-and-lambda-to-process-file-chunks/</link><pubDate>Sun, 20 Jun 2021 00:00:00 +0000</pubDate><guid>https://blog.devutkarsh.com/post/using-aws-s3-and-lambda-to-process-file-chunks/</guid><description>Merge file parts/chunks in S3 on receive - PUT object by invoking lambda Sending files in chunks over the network is most common because it&amp;rsquo;s easy to apply a retry mechanism over failed parts. On receiving all the parts then the parts or chunks are merged together to create one single file. We all know how frustrating is to see download failing at 99%.
Data chunking is the most common technique used by your wifi to send you data packets.</description></item><item><title>API Gateway vs Edge Proxy service vs API Microgateway</title><link>https://blog.devutkarsh.com/post/api-gateway-vs-edge-proxy-service-vs-api-microgateway/</link><pubDate>Mon, 01 Jun 2020 00:00:00 +0000</pubDate><guid>https://blog.devutkarsh.com/post/api-gateway-vs-edge-proxy-service-vs-api-microgateway/</guid><description>Routing request to different microservices from a single REST endpoint Having a single entry point for your all backend microservices in your application comes in handy for the frontend applications. The front end just needs to know one domain to reach for anything. Since in distributed architecture, we have multiple services running, it becomes easier for the frontend client to communicate only with one gateway only without knowing what happens in the background.</description></item></channel></rss>